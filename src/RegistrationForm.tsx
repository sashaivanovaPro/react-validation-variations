// import { useFormValidation } from "./hooks/useFormValidation"
import { useForm } from "react-hook-form"
import {
  RegistrationFormData,
  registrationFormSchema,
} from "./schemas/registrationFormSchema"
import { zodResolver } from "@hookform/resolvers/zod"
import { useState } from "react"

export const RegistrationForm = () => {
  // –ú–ò–ì–†–ê–¶–ò–Ø –° –ö–ê–°–¢–û–ú–ù–û–ì–û –•–£–ö–ê –ù–ê REACT-HOOK-FORM + ZOD
  // -------------------------------------------------
  // 1. –ó–∞–º–µ–Ω–∞ useFormValidation –Ω–∞ useForm –∏–∑ react-hook-form
  // const { values, errors, touched, handlers, passwordVisibility, validation } =
  //   useFormValidation()
  //    ‚Üì –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ ‚Üì
  // const { register, handleSubmit, formState: { errors, touchedFields, isDirty, isValid }, reset } = useForm<RegistrationFormData>({...})

  // 2. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é Zod —á–µ—Ä–µ–∑ zodResolver –≤–º–µ—Å—Ç–æ —Ä—É—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ useEffect –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö

  // 3. –°–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ useState, —Ç.–∫. –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ñ–æ—Ä–º—ã
  const [showPassword, setShowPassword] = useState(false)
  const [showConfirmPassword, setShowConfirmPassword] = useState(false)

  // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è useForm —Å —Ä–µ–∑–æ–ª–≤–µ—Ä–æ–º Zod –∏ —Ä–µ–∂–∏–º–æ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏ onBlur (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ª–æ–≥–∏–∫–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ö—É–∫–∞)
  const {
    register,
    handleSubmit,
    formState: { errors, touchedFields, isDirty, isValid },
    reset,
  } = useForm<RegistrationFormData>({
    resolver: zodResolver(registrationFormSchema),
    mode: "onBlur", // –ê–Ω–∞–ª–æ–≥ –ø–æ–≤–µ–¥–µ–Ω–∏—è with touchedFields –≤ –∫–∞—Å—Ç–æ–º–Ω–æ–º —Ö—É–∫–µ
  })

  // 5. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ —Å–±—Ä–æ—Å–æ–º
  // –ó–∞–º–µ–Ω—è–µ—Ç handleSubmit –∏–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ö—É–∫–∞ –∏ resetForm
  const onSubmit = (data: RegistrationFormData) => {
    console.log("Form submitted with data:", data)
    reset()
  }

  return (
    <div className="registration-container ">
      <form
        action=""
        className="mt-10  mx-auto flex flex-col items-center w-4/5 max-w-[350px] mx-auto bg-white  rounded-lg p-8"
        onSubmit={handleSubmit(onSubmit)}
      >
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫  */}
        <h1 className="text-2xl text-blue-500 font-bold mb-6">
          Registration form
        </h1>

        {/* –ì—Ä—É–ø–ø–∞ –¥–ª—è email */}
        <div className="flex flex-col w-full mb-4">
          <input
            type="text"
            {...register("email")}
            placeholder="Enter your email"
            // name="email"
            // value={values.email}
            className={`w-full border rounded-md px-4 py-2 ${
              errors.email && touchedFields.email
                ? "border-red-500"
                : "border-gray-300"
            }`}
            // onBlur={handlers.blurHandler}
            // onChange={handlers.emailHandler}
          />
          {errors.email && touchedFields.email && (
            <span className="text-red-500 text-sm mt-1">
              {errors.email.message}
              {/* –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Zod —Å—Ö–µ–º—ã */}
            </span>
          )}
        </div>

        {/* –ì—Ä—É–ø–ø–∞ –¥–ª—è –ø–∞—Ä–æ–ª—è */}
        <div className="flex flex-col w-full mb-4">
          <div className="relative">
            <input
              type={showPassword ? "text" : "password"}
              {...register("password")}
              // name="password"
              // value={values.password}
              placeholder="Create password"
              className={`w-full border rounded-md px-4 py-2 pr-10 ${
                errors.password && touchedFields.password
                  ? "border-red-500"
                  : "border-gray-300"
              }`}
              // onBlur={handlers.blurHandler},
              // onChange={handlers.passwordHandler}
            />
            {/* –ö–Ω–æ–ø–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ –±—ã–ª–∞ */}
            <button
              type="button" // —Ç–∏–ø button, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
              className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700"
              onClick={() => setShowPassword(!showPassword)}
            >
              {showPassword ? "üëÅÔ∏è" : "üëÅÔ∏è‚Äçüó®Ô∏è"}
            </button>
          </div>
          {errors.password && touchedFields.password && (
            <span className="text-red-500 text-sm mt-1">
              {errors.password.message}
            </span>
          )}
        </div>

        {/* –ì—Ä—É–ø–ø–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è */}
        <div className="flex flex-col w-full mb-6">
          <div className="relative">
            <input
              type={showConfirmPassword ? "text" : "password"}
              {...register("confirm")}
              // value={values.confirm}
              // name="confirm-password"
              placeholder="Confirm password"
              className={`w-full border rounded-md px-4 py-2 pr-10 ${
                errors.confirm && touchedFields.confirm
                  ? "border-red-500"
                  : "border-gray-300"
              }`}
              // onBlur={handlers.blurHandler}
              // onChange={handlers.confirmPasswordHandler}
            />
            <button
              type="button"
              className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700"
              onClick={() => setShowConfirmPassword(!showConfirmPassword)}
            >
              {showConfirmPassword ? "üëÅÔ∏è" : "üëÅÔ∏è‚Äçüó®Ô∏è"}
            </button>
          </div>
          {errors.confirm && touchedFields.confirm && (
            <span className="text-red-500 text-sm mt-1">
              {errors.confirm.message}
              {/* –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ refine –≤ Zod —Å—Ö–µ–º–µ */}
            </span>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã */}
        <button
          className="bg-blue-500 text-white px-6 py-2 rounded hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed"
          type="submit"
          disabled={!(isDirty && isValid)}
        >
          Submit
        </button>
      </form>
    </div>
  )
}
